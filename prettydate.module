<?php
/**
 * @file
 * Code for the prettydate feature.
 */

/**
 * Take the date field and render it into pseudo-iso format required by the JS
 *
 * @param $dates 
 *   An array of dates that are to be converted
 *
 * @param $subformat 
 *   Optional name of the subformat this library will output if JS is disabled
 *
 * @return 
 *   An array of Prettydate formatted dates
 *
 */
function prettydate_setup_date($dates, $subformat = '') {
  
  $ret = array();  

  //Setup subformatter.
  if ($subformat == NULL || $subformat == '') {
    $sub_date_setup = 'F j, Y';
  }
  else{
    //Grab the date format and get ready to use it.
    $sub_date_setup = $subformat;
 }

  foreach ($dates as $date_num => $date) {
    //Get first date.
    $curtime = strtotime($date['value']);
    if ($curtime === FALSE) { 
      continue; 
    }
    
    //Check on second date.
    $totime = NULL;
    if (isset($date['value2'])) {
      if ( strcmp($date['value2'], $date['value']) != 0 ) {
        $totime = strtotime($date['value2']);
      }
    }    


    //Convert the date to a pretty date format.
    $js_iso = date('Y-m-d\TH:i:s\Z', $curtime);
    $default_date = date($sub_date_setup, $curtime);
   
    $ret[$date_num] = '<a title="' . $js_iso . '" class="prettydate start-date">' . $default_date . '</a>';
 
    //Convert second date.
    if ($totime != NULL) {
      $js_iso_2 = date('Y-m-d\TH:i:s\Z', $totime);
      $default_2 = date($sub_date_setup, $totime);
    
      $ret[$date_num] .= ' <a title="' . $js_iso_2 . '" class="prettydate end-date">' . $default_2 . '</a>';
    }
  }

  return $ret;

}

/**
 * Return an array of date formatters for the default display
 * 
 * PrettyDate format should DEFINITELY be removed here as to prevent recursion.
 *
 * @param $include_empty
 *   Optional TRUE/FALSE. Prunes empty formatters when FALSE
 *
 * @return
 *   An array of date formatters
 */
function prettydate_format_options($include_empty = TRUE) {
  $formats = _system_date_format_types_build();
  $options = array();

  if ($include_empty && !empty($styles)) {
    $options[''] = t('<none>');
  }
  
  foreach ( $formats as $mname => $vals ) {
    $options[$mname] = $vals['title'];
  }

  if ( empty($options) ) {
    $options[''] = t('No Defined Formats');
  }

  //Remove PrettyDate formatters to prevent recursive lols.
  //There has to be a better way to get all the prettydates. TODO
  if ( isset($options['prettydate_default']) ) {
    unset($options['prettydate_default']);
  }

  return $options;

}

/**
 * Implements hook_field_formatter_info().
 */
function prettydate_field_formatter_info() {
  $formatters = array();

  $formatters['prettydate_default'] = array(
    'label' => t('PrettyDate'),
    'description' => t('Displays a date in a more understandable way: x seconds ago, x hours ago, etc...'),
    'field types' => array(
       'datetime', 'datestamp', 'date',
    ),
    'settings' => array(
      'display_format' => '',
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * This handles choosing a date formatter as the default display for when the JS cannot format the date
 */
function prettydate_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $ret = array();
  
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $options = prettydate_format_options(FALSE);

  $ret['display_format'] = array(
    '#title' => t('Default display format'),
    '#type' => 'select',
    '#default_value' => $settings['display_format'],
    '#options' => $options,
  );

  return $ret;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function prettydate_field_formatter_settings_summary($field, $instance, $view_mode) {
  //Get the display.
  $display = $instance['display'][$view_mode];
  
  //No sense returning a summary on someone else's formatter.
  if ($display['type'] == 'prettydate_default') {
    $settings = $display['settings']; 

    //Create the string to return.
    //Without a string we are not configurable.
    $theRet = "<strong>SubFormatter:</strong> ";
    
    $format = $settings['display_format'];
    if ($format == NULL || $format == '') {
      $theRet .= 'none';
    }
    else{
      //Get the title from the machine name here. TODO  
      $theRet .= $format;
    }
    
    return $theRet;
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function prettydate_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();

  //Check on the display type and render accordingly.
  switch ( $display['type'] ) {
    case 'prettydate_default':
      //Get subformat.
      $subformatter = $display['settings']['display_format'];      
      $subformat = date_formatter_format('date_default', array('format_type' => $subformatter), date_granularity($field), $langcode);

      $formatted_dates = prettydate_setup_date($items, $subformat);
      foreach ( $formatted_dates as $delta => $item ) {
         $elements[$delta] = array('#markup' => $item);
      }
      
      //Make sure we get the js that does all the magic onto the page.
      drupal_add_js(drupal_get_path('module', 'prettydate') . '/js/prettydate.js', 'file');
      break;
  }

  return $elements;

}
